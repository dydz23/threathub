import os
import re
import requests
from dotenv import load_dotenv

load_dotenv()
ABUSECH_API_KEY = os.getenv("ABUSECH_API_KEY")

HEADERS = {
    "User-Agent": "ai-soc-agent/1.0",
    "Content-Type": "application/json",
    "Accept": "application/json",
    "Auth-Key": ABUSECH_API_KEY
}

MB_API_URL = "https://mb-api.abuse.ch/api/v1/"

def lookup_malwarebazaar(ioc: str):
    if not ABUSECH_API_KEY:
        return {"error": "Missing Abuse.ch API key for MalwareBazaar."}

    ioc = ioc.strip()

    # üîç Check if input is a keyword-based search (e.g., tag:TA505)
    if ":" in ioc and not re.match(r"^[a-fA-F0-9]{32,64}$", ioc):
        return _advanced_search(ioc)

    # üß¨ Otherwise assume hash (md5/sha256/tlsh/etc)
    payload = {
        "query": "get_info",
        "hash": ioc
    }

    try:
        url = "https://mb-api.abuse.ch/api/v1/"
        
        # Use form data, not JSON for MalwareBazaar API
        res = requests.post(url, data=payload, headers={
            "User-Agent": "ai-soc-agent/1.0",
            "Auth-Key": ABUSECH_API_KEY
        }, timeout=10)
        
        print(f"MalwareBazaar API URL: {url}")
        print(f"MalwareBazaar API Payload: {payload}")
        print(f"MalwareBazaar API Response Status: {res.status_code}")
        print(f"MalwareBazaar API Response: {res.text[:500]}...")
        
        if res.status_code != 200:
            return {"error": f"HTTP {res.status_code}", "details": res.text}

        data = res.json()
        print(f"MalwareBazaar Data: {data}")
        
        if data.get("query_status") == "ok" and data.get("data"):
            entry = data["data"][0]
            return {
                "found": True,
                "SHA256": entry.get("sha256_hash"),
                "File Name": entry.get("file_name"),
                "File Type": entry.get("file_type_mime"),
                "File Size": entry.get("file_size"),
                "Signature": entry.get("signature"),
                "Tags": entry.get("tags"),
                "Vendor Detections": entry.get("vendor_intel", {}),
                "Delivery Method": entry.get("delivery_method"),
                "First Seen": entry.get("first_seen"),
                "Last Seen": entry.get("last_seen"),
                "Comment": entry.get("comment"),
                "Reporter": entry.get("reporter"),
                "Intelligence": entry.get("intelligence", {})
            }
        elif data.get("query_status") == "hash_not_found":
            return {"message": "Hash not found in MalwareBazaar."}
        elif data.get("query_status") == "no_results":
            return {"message": "No MalwareBazaar results found."}
        elif data.get("query_status") == "missing_query":
            return {"error": "Invalid query format for MalwareBazaar API."}
        else:
            return {
                "status": data.get("query_status"),
                "reason": data.get("reason", "No reason provided.")
            }

    except Exception as e:
        print(f"MalwareBazaar Exception: {str(e)}")
        return {"error": str(e)}

def _advanced_search(term: str):
    """Advanced search with proper form data"""
    payload = {
        "query": "search",
        "search_term": term
    }
    
    try:
        url = "https://mb-api.abuse.ch/api/v1/"
        
        # Use form data, not JSON for MalwareBazaar API
        res = requests.post(url, data=payload, headers={
            "User-Agent": "ai-soc-agent/1.0",
            "Auth-Key": ABUSECH_API_KEY
        }, timeout=10)
        
        print(f"MalwareBazaar Search URL: {url}")
        print(f"MalwareBazaar Search Payload: {payload}")
        print(f"MalwareBazaar Search Response Status: {res.status_code}")
        print(f"MalwareBazaar Search Response: {res.text[:500]}...")
        
        if res.status_code != 200:
            return {"error": f"HTTP {res.status_code}", "details": res.text}

        data = res.json()
        print(f"MalwareBazaar Search Data: {data}")
        
        if data.get("query_status") == "ok" and data.get("data"):
            return {
                "found": True,
                "results": [
                    {
                        "SHA256": entry.get("sha256_hash"),
                        "File Name": entry.get("file_name"),
                        "File Type": entry.get("file_type_mime"),
                        "Signature": entry.get("signature"),
                        "Tags": entry.get("tags"),
                        "First Seen": entry.get("first_seen"),
                        "Reporter": entry.get("reporter"),
                        "File Size": entry.get("file_size")
                    }
                    for entry in data["data"][:5]  # Limit to first 5 results
                ]
            }
        elif data.get("query_status") == "no_results":
            return {"message": "No MalwareBazaar search results found."}
        else:
            return {
                "status": data.get("query_status"),
                "reason": data.get("reason", "No data matched.")
            }
    except Exception as e:
        print(f"MalwareBazaar Search Exception: {str(e)}")
        return {"error": str(e)}